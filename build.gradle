plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.google.cloud.tools.appengine' version '2.4.4'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.goit'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}
ext {
    mapstructVersion = "1.5.5.Final"
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'com.google.cloud.tools:appengine-maven-plugin:2.4.4'

    implementation 'org.springframework.cloud:spring-cloud-gcp-starter-logging:1.2.8.RELEASE'
    implementation 'com.google.cloud:google-cloud-core:2.20.0'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

jib {
    to {
//        image = "gcr.io/$PROJECT_ID/microservice-template:manual"
        image = "gcr.io/gcr.io/cloudrun/placeholder@sha256:074b4a18d91897a871e2e25184d63393de20415a053fad59c8ebb54d910b5d62/microservice-template:manual"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion = "0.8.8"
//    reportsDirectory = layout.buildDirectory.dir('jacoco-report')
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.1
            }
        }
    }
}
